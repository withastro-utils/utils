---
import getContext from '@astro-utils/context';
import { createUniqueContinuanceName } from '../../form-tools/connectId.js';
import { isPost, validateAction } from '../../form-tools/post.js';
import { diffProps, omitProps } from '../../components-control/props-utils.js';
import objectAssignDeep from 'object-assign-deep';
import { MissingClickActionError } from '../../errors/MissingClickActionError.js';

export interface Props<T extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>> extends astroHTML.JSX.ButtonHTMLAttributes {
    onClick: Function;
    connectId?: string;
    whenFormOK?: boolean;
    as?: T;
    props?: React.ComponentProps<T>;
    state?: any;
    extra?: any;
}

const { as: asComponent = 'button', props: componentProps, onClick, whenFormOK, connectId, ...props } = Astro.props;
if (typeof onClick !== 'function') {
    throw new MissingClickActionError();
}

componentProps && Object.assign(props, componentProps);

const { bind, executeAfter, elementsState, tempValues, tempBindValues, method, buttonIds, settings, bindId = '' } = getContext(Astro, '@astro-utils/forms');
const tempCounter = tempBindValues || tempValues;
const elementPropsState = elementsState || tempValues;

let buttonUniqueId = connectId;
if (!connectId) {
    const idBaseFunction = createUniqueContinuanceName(onClick) + (method ? 'form' : '');
    tempCounter[idBaseFunction] ??= 0;

    const counter = ++tempCounter[idBaseFunction];
    buttonUniqueId = `${bindId + idBaseFunction}-${counter}`;
}

const allProps = {
    ...props,
    ...elementPropsState[buttonUniqueId],
    defaults: props,
    reset() {
        for (const key of Object.keys(allProps)) {
            delete allProps[key];
        }
        Object.assign(allProps, props);
    },
};

// add this button to list of button for the default submit action
if (buttonIds && !allProps.disabled) {
    buttonIds.push([buttonUniqueId, allProps.id, whenFormOK]);
}

async function executeFormAction(callback: Function = onClick) {
    const validAction = isPost(Astro) && (await validateAction(Astro, 'button-callback', buttonUniqueId));

    if (validAction && whenFormOK && settings) {
        settings.showValidationErrors = true;
    }

    const checkFormValidation = (whenFormOK && !bind?.errors.length) || !whenFormOK;
    if (checkFormValidation && validAction) {
        const originalProps = objectAssignDeep({}, { ...props, extra: null });

        if (!allProps.disabled) {
            await callback.call(allProps);
        }

        elementPropsState[buttonUniqueId] = diffProps(originalProps, allProps, ['extra', 'reset', 'defaults']);
    }
}

if (executeAfter) {
    executeAfter.push(executeFormAction);
} else if (whenFormOK) {
    throw new Error('Use BButton with `whenFormOK` inside a BindForm component');
} else {
    await executeFormAction();
}

const { innerText, innerHTML, remove: doNotWriteHTML, ...changedProps }: any = omitProps(allProps, ['extra', 'state', 'reset', 'defaults']);

const Component = asComponent as any;
const slotData = innerHTML ?? (Astro.slots.has('default') ? await Astro.slots.render('default') : '');
---

{
    !doNotWriteHTML && (
        <Component type='submit' name='button-callback' value={buttonUniqueId} formNoValidate={!whenFormOK} {...changedProps}>
            {innerText ?? <Fragment set:html={slotData} />}
        </Component>
    )
}
