---
import getContext from '@astro-utils/context';
import { validateFormInput } from '../../components-control/input-parse.js';
import { validateFrom } from '../../form-tools/csrf.js';
import { ModifyDeep } from '../../utils.js';
import { getProperty } from 'dot-prop';
import { addOnSubmitClickEvent } from '../../form-tools/events.js';
import { MissingNamePropError } from '../../errors/MissingNamePropError.js';
import { ZodType } from 'zod';

interface ModifyInputProps {
    minlength?: number;
    maxlength?: number;
    [key: `data-${string}`]: any;
}

export interface Props<T extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>> extends Partial<ModifyDeep<astroHTML.JSX.TextareaHTMLAttributes, ModifyInputProps>> {
    name: string;
    errorMessage?: string;
    validate?: Function | ZodType;
    as?: T;
    props?: React.ComponentProps<T>;
    onSubmitClick?: string;
    [key: `data-${string}`]: any;
}

if (!Astro.props.name) {
    throw new MissingNamePropError('BInput');
}

const { bind, method, onSubmitClickGlobal, bindId = '' } = getContext(Astro, '@astro-utils/forms');
if (!Astro.props.disabled && method === 'POST' && (await validateFrom(Astro))) {
    await validateFormInput(Astro, bind, bindId);
}

const { as: asComponent = 'textarea', props: componentProps, value: defaultValue, onSubmitClick = onSubmitClickGlobal, ...props } = Astro.props;
props.name = bindId + props.name;
addOnSubmitClickEvent(onSubmitClick, props);

const value = getProperty(bind, Astro.props.name, (await Astro.slots.render('default')) ?? defaultValue);

const Component = asComponent as any;
---

<Component {...props} {...componentProps}>{value}</Component>
