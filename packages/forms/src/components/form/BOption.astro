---
import getContext from '@astro-utils/context';
import { stringifySelectValue, validateSelectOption } from '../../components-control/select.js';
import { validateFrom } from '../../form-tools/csrf.js';

export interface Props<T extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>> extends Omit<astroHTML.JSX.OptionHTMLAttributes, 'value'> {
    as?: T;
    props?: React.ComponentProps<T>;
    value?: string | number | undefined | null | Date;
}

const { bind, name, stringifySelectedOptions, method } = getContext(Astro, '@astro-utils/forms');

let htmlSlot = await Astro.slots.render('default');
const stringifyOptionValue = stringifySelectValue(Astro.props.value ?? htmlSlot);

if (Astro.locals.__formsInternalUtils.firstRender && !Astro.props.disabled && method === 'POST' && (await validateFrom(Astro))) {
    validateSelectOption(bind, name, stringifyOptionValue);
}

if (Astro.props.value != null) {
    Astro.props.value = stringifyOptionValue;
}

const { as: asComponent = 'option', props: componentProps, selected, ...props } = Astro.props;
const Component = asComponent as any;
---

<Component selected={!Astro.props.disabled && stringifySelectedOptions.includes(stringifyOptionValue)} {...props} {...componentProps}>
    <Fragment set:html={htmlSlot} />
</Component>
