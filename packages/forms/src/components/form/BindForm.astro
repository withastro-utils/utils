---
import { asyncContext } from '@astro-utils/context';
import getContext from '@astro-utils/context';
import ViewStateManager from '../../components-control/form-utils/view-state.js';
import { BindContext } from '../../components-control/types.js';
import Bind from '../../components-control/form-utils/bind-form.js';

export interface Props {
    bind?: ReturnType<typeof Bind>;
    state?: boolean | string[];
    omitState?: string[];
    defaultSubmitClick?: string | false;
    key?: string;
}

const { renderForm = true, bindId: parentBindId = '' } = getContext(Astro, '@astro-utils/forms');
if (!renderForm || Astro.locals.forms._stopRendering) {
    return;
}

const { bind = Bind(), defaultSubmitClick, key = '' } = Astro.props;

const bindId = key + Astro.locals.__formsInternalUtils.bindFormCounter++;
const context: BindContext = Astro.locals.__formsInternalUtils.bindGlobalState[bindId] ?? {
    executeAfter: [],
    method: 'GET',
    bind,
    tempBindValues: {},
    elementsState: {} as any,
    onSubmitClickGlobal: defaultSubmitClick as string,
    buttonIds: [] as [string, string | null, boolean][],
    settings: { showValidationErrors: false },
    bindId,
    renderForm: false,
    newState: false,
};

const resetContext = () => {
    context.buttonIds = [];
    context.tempBindValues = {};
    context.executeAfter = [];
};

if (context.viewState) {
    context.bind = Object.assign(bind, context.bind.__getState())
    context.viewState._bind = context.bind;

    if (bind.on.stateLoaded) {
        await bind.on.stateLoaded?.();
        if (Astro.locals.forms._stopRendering) {
            return;
        }
    }
} else {
    const viewState = new ViewStateManager(bind, context.elementsState, Astro, context.bindId);
    context.viewState = viewState;
    context.newState = !(await viewState.loadState());
    if (bind.on.stateLoaded) {
        await bind.on.stateLoaded?.();
        if (Astro.locals.forms._stopRendering) {
            return;
        }
    }
    if (context.newState) {
        await bind.on.newState?.();
        if (Astro.locals.forms._stopRendering) {
            return;
        }
    }
}

// For some reason the first render, in astro appending in the opposite direction, meaning it first return the html and than runs the logic?
resetContext();
await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parentBindId });

// Get information about the form
context.method = context.newState ? 'GET' : Astro.request.method;

resetContext();
await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parentBindId });
bind.__finishFormValidation();

if (context.method == 'POST') {
    if (!context.newState && bind.on.pagePostBack) {
        await bind.on.pagePostBack?.();
        if (Astro.locals.forms._stopRendering) {
            return;
        }
    }

    if (Astro.locals.__formsInternalUtils.firstRender) {
        for (const func of context.executeAfter) {
            await func();
            if (Astro.locals.forms._stopRendering) {
                return;
            }
        }
    }

    context.method = 'GET';
    resetContext();
    await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parentBindId });
}

// Edit form render, add default submit button
if (context.onSubmitClickGlobal == null && context.buttonIds.length > 0) {
    const [buttonFormId, HTMLButtonId] = context.buttonIds.findLast(([, , whenFormOk]) => whenFormOk) ?? context.buttonIds.at(-1)!;
    const state = (context.elementsState[buttonFormId] ??= {});

    state.id = HTMLButtonId ?? `_${buttonFormId}`;
    context.onSubmitClickGlobal = state.id;
}

resetContext();
context.renderForm = true;
const htmlSlot = await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parentBindId });
---

<input type='hidden' name={context.viewState.filedName} value={await context.viewState.createViewState()} />
<Fragment set:html={htmlSlot} />
